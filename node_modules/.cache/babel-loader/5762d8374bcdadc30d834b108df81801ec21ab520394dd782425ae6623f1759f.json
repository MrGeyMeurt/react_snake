{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manut\\\\Documents\\\\my-app\\\\src\\\\components\\\\Board\\\\Board.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport Snake from \"../Snake/Snake\";\nimport gsap from \"gsap\";\nimport s from \"./Board.module.scss\";\nimport Food from \"../Food/Food\";\nimport { generateRandomCoordinates } from \"../../utils/utils\";\nimport GameOver from \"../GameOver/GameOver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const [snakeData, setSnakeData] = useState([[0, 0], [10, 0]]);\n  const [foodArray, setFoodArray] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const timer = useRef(0);\n  const foodTimer = useRef(0);\n  const direction = useRef('RIGHT');\n  const canChangeDirection = useRef(true);\n  const gameIsOver = () => {\n    gsap.ticker.remove(gameLoop);\n    setGameOver(true);\n\n    //console.log(\"game over\") // fin du jeu\n  };\n  const IsOutOfBorder = () => {\n    let head = snakeData[snakeData.length - 1];\n    //console.log(head);\n\n    if (head[0] >= 500 || head[1] >= 500 || head[0] < 0 || head[1] < 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const hasEatenFood = () => {\n    //comparer les coordonnée de la  tête du snake avec LES food\n    const head = snakeData[snakeData.length - 1];\n\n    //si ya match en renvoie true\n\n    //sinon en renvoir false\n  };\n  const moveSnake = () => {\n    let newSnakeData = [...snakeData];\n    let head = newSnakeData[newSnakeData.length - 1];\n    //console.log(head); //position de la tete avant changement\n\n    switch (direction.current) {\n      case 'UP':\n        //console.log(\"UP\");\n        head = [head[0], head[1] - 10];\n        break;\n      case 'DOWN':\n        //console.log(\"DOWN\");\n        head = [head[0], head[1] + 10];\n        break;\n      case 'LEFT':\n        //console.log(\"LEFT\");\n        head = [head[0] - 10, head[1]];\n        break;\n      case 'RIGHT':\n        //console.log(\"RIGHT\");\n        head = [head[0] + 10, head[1]];\n        break;\n      default:\n        break;\n    }\n    newSnakeData.push(head);\n    newSnakeData.shift();\n    const outOfBorder = IsOutOfBorder();\n    const snakeAteFood = hasEatenFood();\n    if (outOfBorder) {\n      gameIsOver();\n    } else {\n      setSnakeData(newSnakeData);\n    }\n  };\n  const onKeyDown = e => {\n    //console.log(e);\n    if (canChangeDirection.current === false) return;\n    canChangeDirection.current = false;\n    switch (e.keyCode) {\n      case 90:\n        //console.log(\"going up\");\n        if (direction.current !== \"DOWN\") {\n          direction.current = \"UP\";\n        }\n        //Going up\n        break;\n      case 83:\n        if (direction.current !== \"UP\") {\n          direction.current = \"DOWN\";\n        }\n        //Going down\n        break;\n      case 81:\n        if (direction.current !== \"RIGHT\") {\n          direction.current = \"LEFT\";\n        }\n        //Going left\n        break;\n      case 68:\n        if (direction.current !== \"LEFT\") {\n          direction.current = \"RIGHT\";\n        }\n        //Going right\n        break;\n      case 38:\n        if (direction.current !== \"DOWN\") {\n          direction.current = \"UP\";\n        }\n        //Going up\n        break;\n      case 40:\n        if (direction.current !== \"UP\") {\n          direction.current = \"DOWN\";\n        }\n        //Going down\n        break;\n      case 37:\n        if (direction.current !== \"RIGHT\") {\n          direction.current = \"LEFT\";\n        }\n        //Going left\n        break;\n      case 39:\n        if (direction.current !== \"LEFT\") {\n          direction.current = \"RIGHT\";\n        }\n        //Going right\n        break;\n      default:\n        break;\n    }\n  };\n  const addFood = () => {\n    //console.log(\"add food\");\n    //génération cooredonnées\n    const coordinates = generateRandomCoordinates();\n\n    //maj du state\n    setFoodArray(oldFoodArray => [...oldFoodArray, coordinates]);\n  };\n  const gameLoop = (time, deltaTime, frame) => {\n    //console.log(time, deltaTime, frame);\n    timer.current += deltaTime * 0.001;\n    foodTimer.current += deltaTime * 0.001;\n    //console.log(foodTimer.current); voir le timer de la food\n\n    if (foodTimer.current > 3 && foodArray.length < 10) {\n      foodTimer.current = 0;\n      //console.log(\"pop\");\n      addFood();\n    }\n    if (timer.current > .3) {\n      //console.log(\"move snake\");\n      timer.current = 0;\n      moveSnake();\n      canChangeDirection.current = true;\n    }\n  };\n  const replay = () => {\n    //replay game\n\n    //reset game\n    setGameOver(false);\n    //reset snake\n    setSnakeData([[0, 0], [10, 0]]);\n    //reset food\n    setFoodArray([]);\n    //reset direction\n    direction.current = \"RIGHT\";\n    //reset timer\n    timer.current = 0;\n    //reset food timer\n    foodTimer.current = 0;\n  };\n  useEffect(() => {\n    window.addEventListener(\"keydown\", onKeyDown);\n    gsap.ticker.add(gameLoop);\n    return () => {\n      window.removeEventListener(\"keydown\", onKeyDown);\n      gsap.ticker.remove(gameLoop);\n    };\n  }, [snakeData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.board,\n    children: [/*#__PURE__*/_jsxDEV(Snake, {\n      data: snakeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(GameOver, {\n      replay: replay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 22\n    }, this), foodArray.map((coordinates, i) => /*#__PURE__*/_jsxDEV(Food, {\n      coordinates: coordinates\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"/t7lbXM0BXUScQOw+z5vE2yJjM0=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useRef","useState","Snake","gsap","s","Food","generateRandomCoordinates","GameOver","jsxDEV","_jsxDEV","Board","_s","snakeData","setSnakeData","foodArray","setFoodArray","gameOver","setGameOver","timer","foodTimer","direction","canChangeDirection","gameIsOver","ticker","remove","gameLoop","IsOutOfBorder","head","length","hasEatenFood","moveSnake","newSnakeData","current","push","shift","outOfBorder","snakeAteFood","onKeyDown","e","keyCode","addFood","coordinates","oldFoodArray","time","deltaTime","frame","replay","window","addEventListener","add","removeEventListener","className","board","children","data","fileName","_jsxFileName","lineNumber","columnNumber","map","i","_c","$RefreshReg$"],"sources":["C:/Users/manut/Documents/my-app/src/components/Board/Board.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Snake from \"../Snake/Snake\";\r\nimport gsap from \"gsap\";\r\nimport s from \"./Board.module.scss\";\r\nimport Food from \"../Food/Food\";\r\nimport { generateRandomCoordinates } from \"../../utils/utils\";\r\nimport GameOver from \"../GameOver/GameOver\";\r\n\r\nconst Board = () => {\r\n    const [snakeData, setSnakeData] = useState([\r\n        [0, 0],\r\n        [10, 0],\r\n    ]);\r\n    \r\n    const [foodArray, setFoodArray] = useState([]);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    \r\n    const timer = useRef(0);\r\n    const foodTimer = useRef(0);\r\n    const direction = useRef('RIGHT');\r\n    const canChangeDirection = useRef(true);\r\n    \r\n    const gameIsOver = () => {\r\n        gsap.ticker.remove(gameLoop);\r\n        \r\n        setGameOver(true);\r\n        \r\n        //console.log(\"game over\") // fin du jeu\r\n    };\r\n    \r\n    const IsOutOfBorder = () => {\r\n        let head = snakeData[snakeData.length - 1];\r\n        //console.log(head);\r\n        \r\n        if (head[0] >= 500 || head[1] >= 500 || head[0] < 0 || head[1] < 0) {\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const hasEatenFood = () => {\r\n        //comparer les coordonnée de la  tête du snake avec LES food\r\n        const head = snakeData[snakeData.length - 1];\r\n\r\n        //si ya match en renvoie true\r\n\r\n        //sinon en renvoir false\r\n    }\r\n    \r\n    const moveSnake = () => {\r\n        let newSnakeData = [...snakeData];\r\n        let head = newSnakeData[newSnakeData.length - 1];\r\n        //console.log(head); //position de la tete avant changement\r\n        \r\n        switch (direction.current) {\r\n            case 'UP':\r\n            //console.log(\"UP\");\r\n            head = [head[0], head[1] - 10];\r\n            break;\r\n            case 'DOWN':\r\n            //console.log(\"DOWN\");\r\n            head = [head[0], head[1] + 10];\r\n            break;\r\n            case 'LEFT':\r\n            //console.log(\"LEFT\");\r\n            head = [head[0] - 10, head[1]];\r\n            break;\r\n            case 'RIGHT':\r\n            //console.log(\"RIGHT\");\r\n            head = [head[0] + 10, head[1]];\r\n            break;\r\n            \r\n            default:\r\n            break;\r\n        }\r\n        \r\n        newSnakeData.push(head);\r\n        newSnakeData.shift();\r\n        \r\n        const outOfBorder = IsOutOfBorder();\r\n        const snakeAteFood = hasEatenFood();\r\n        \r\n        if (outOfBorder) {\r\n            gameIsOver();\r\n        } else {\r\n            setSnakeData(newSnakeData);\r\n        }   \r\n    };\r\n    \r\n    const onKeyDown = (e) => {\r\n        //console.log(e);\r\n        if (canChangeDirection.current === false) return;\r\n        canChangeDirection.current = false;\r\n        \r\n        switch (e.keyCode) {\r\n            case 90:\r\n            //console.log(\"going up\");\r\n            if(direction.current !== \"DOWN\") {\r\n                direction.current = \"UP\";\r\n            }\r\n            //Going up\r\n            break;\r\n            case 83:\r\n            if(direction.current !== \"UP\") {\r\n                direction.current = \"DOWN\";\r\n            }\r\n            //Going down\r\n            break;\r\n            case 81:\r\n            if(direction.current !== \"RIGHT\") {\r\n                direction.current = \"LEFT\";\r\n            }\r\n            //Going left\r\n            break;\r\n            case 68:\r\n            if(direction.current !== \"LEFT\") {\r\n                direction.current = \"RIGHT\";\r\n            }\r\n            //Going right\r\n            break;\r\n            \r\n            case 38:\r\n            if(direction.current !== \"DOWN\") {\r\n                direction.current = \"UP\";\r\n            }\r\n            //Going up\r\n            break;\r\n            case 40:\r\n            if(direction.current !== \"UP\") {\r\n                direction.current = \"DOWN\";\r\n            }\r\n            //Going down\r\n            break;\r\n            case 37:\r\n            if(direction.current !== \"RIGHT\") {\r\n                direction.current = \"LEFT\";\r\n            }\r\n            //Going left\r\n            break;\r\n            case 39:\r\n            if(direction.current !== \"LEFT\") {\r\n                direction.current = \"RIGHT\";\r\n            }\r\n            //Going right\r\n            break;\r\n            \r\n            default:\r\n            break;\r\n        }\r\n    };\r\n    \r\n    const addFood = () => {\r\n        //console.log(\"add food\");\r\n        //génération cooredonnées\r\n        const coordinates = generateRandomCoordinates();\r\n        \r\n        //maj du state\r\n        setFoodArray((oldFoodArray) => [...oldFoodArray, coordinates]);\r\n    };\r\n    \r\n    const gameLoop = (time, deltaTime, frame) => {\r\n        //console.log(time, deltaTime, frame);\r\n        timer.current += deltaTime * 0.001;\r\n        foodTimer.current += deltaTime * 0.001;\r\n        //console.log(foodTimer.current); voir le timer de la food\r\n        \r\n        if (foodTimer.current > 3 && foodArray.length < 10 ) {\r\n            foodTimer.current = 0;\r\n            //console.log(\"pop\");\r\n            addFood();\r\n        }\r\n        \r\n        if (timer.current > .3) {\r\n            //console.log(\"move snake\");\r\n            timer.current = 0;\r\n            moveSnake();\r\n            canChangeDirection.current = true;\r\n        }\r\n    };\r\n    \r\n    const replay = () => {\r\n        //replay game\r\n        \r\n        //reset game\r\n        setGameOver(false);\r\n        //reset snake\r\n        setSnakeData([\r\n            [0, 0], \r\n            [10, 0],\r\n        ]);\r\n        //reset food\r\n        setFoodArray([]);\r\n        //reset direction\r\n        direction.current = \"RIGHT\";\r\n        //reset timer\r\n        timer.current = 0;\r\n        //reset food timer\r\n        foodTimer.current = 0;\r\n    }\r\n    \r\n    useEffect(() => {\r\n        window.addEventListener(\"keydown\",onKeyDown);\r\n        gsap.ticker.add(gameLoop);\r\n        \r\n        return () => {\r\n            window.removeEventListener(\"keydown\", onKeyDown);\r\n            gsap.ticker.remove(gameLoop);\r\n        };\r\n    }, [snakeData]);\r\n    \r\n    return (\r\n        <div className={s.board}>\r\n        <Snake data={snakeData} />\r\n        \r\n        {gameOver && <GameOver replay={replay}/>}\r\n        \r\n        {foodArray.map((coordinates, i) => (\r\n            <Food key={i} coordinates={coordinates}/>\r\n        ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}